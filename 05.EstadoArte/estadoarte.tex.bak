En este capítulo se dará a conocer como el problema de motion planning ha ido evolucionando en el tiempo, suscitado un  gran interés en la comunidad en las últimas décadas, debido principalmente a que existen muchas variantes.

El estudio del problema de motion planning se remonta al año 1966 con el \textit{Sofa Problem} planteado por Leo Moser \cite{3}. En este trabajo se planteaba el problema de desplazar un mueble a través de un pasillo, lo que implicaba calcular si era posible trasladar y rotar un sofa en la esquina del pasillo. Aunque el problema de motion planning se hizo realmente conocido gracias al \textit{Piano Mover's problem}, que consiste en mover un piano dentro de una habitación sin que colisione con otros objetos que esten presentes en el salón. Luego de haber estudiado la importancia del espacio de configuración podemos apreciar que el problema de mover un piano dentro de una casa puede ser fácilmente transformado  que en vez de un piano sea una pelota de tennis, gracias al calculo del espacio de configuración de los obstáculos. En la figura ~\ref{fig:Fig7} se puede apreciar como se asegura que dentro de la región blanca el piano no sufrirá colisiones. El conjunto de todas las posiciones en las que puede estar el piano se conoce como el C$-$space del piano.
\begin{figure}[h!]
\centering
	    \includegraphics[width=10cm]{Imagenes/07EstadoArte}
\caption{Espacio de configuración del piano}
\label{fig:Fig7}
\end{figure}

Es posible realizar una separación entre las distintas técnicas que se han empleado para dar solución al problema de motion planning. Por un lado están las técnicas completas que aseguran y entregan el mismo resultado en cada una de las ejecuciones. Además son capaces de decir si existe una solución. El gran problema con este tipo de métodos es que en entornos complejos, cuando existen muchas restricciones o el grado de libertad del vehículo es muy elevado, presentan limitaciones con respecto al tiempo de cómputo necesario para obtener una solución. Es por ello que han surgido nuevos enfoque como los métodos probabilisticos de roadmap o los basados en árboles aleatorios de exploración rápida. Además existen técnicas de optimización como los algoritmos genéticos, colonia de hormigas y enjambre de partículas.

En base a lo mencionado anteriormente se realizará la siguiente clasificación \cite{5}:

\begin{itemize}
\item Deterministicos

\item Probabilisticos y aleatorios

\item Optimización
\end{itemize}

\section{Deterministicos}
La mayoría de estas técnicas se basan en la geometría de los obstáculos para generar las rutas libres de colisiones. Además gran parte de estos métodos se basan en la teoría de grafos.

\subsection{Campos Potenciales}
Los métodos que se basan en campos potenciales usan la física de los potenciales eléctrico como una heurística para guíar la búsqueda.

\begin{figure}[h!]
\centering
	    \includegraphics[width=8cm]{Imagenes/11EstadoArte}
\caption{Partícula siendo atraída a su objetivo}
\label{fig:Fig11}
\end{figure}

El primer trabajo que asoció los campos potenciales al problema de motion planning para evitar colisiones fue Khatib en el año 1985 \cite{4}. El principio básico de este método es considerar al robot o vehículo como una partícula eléctrica, la cual es atraída hacia el punto de destino por un potencial de atracción, y a su vez es repelida de los obstáculos presentes en el espacio de trabajo por un potencial de repulsión. Por lo que se define el siguiente campo potencial,

\begin{center}
$U(q)=U_{atr}(q)+U_{rep}(q) $
\end{center}
En donde $U_{atr}$ corresponde al potencial de atracción que impulsa al robot hacia el objetivo, mientras que $U_{rep}$ es el potencial de repulsión que evita los obstáculos. Por lo que la idea básica es que $U_{atr}$ debería incrementarse si el robot se aleja de su objetivo.

El proceso iterativo de este algoritmo se basa en los siguientes pasos:
\begin{enumerate}
  \item Calcular el campo de fuerza $\overrightarrow{F}(q) = -\nabla U(q) $ en la configuración actual
  \item Avanzar un pequeño paso en la dirección indicada por esta fuerza
  \item Repetir hasta alcanzar la configuración de destino
\end{enumerate}

El problema principal con este método es que el robot puede quedar atrapado en un mínimo local dentro del campo potencial. Esto significa que aunque exista una solución, el robot puede que no sea capaz de encontrarla.


\subsection{Descomposición de celdas}
Este método consiste en representar el espacio libre como un conjunto de celdas desde el punto de origen hasta el punto de destino. Posteriormente se traza un grafo de conectividad entre las celdas para determinar si es posible acceder desde una celda a la siguiente. Luego se busca una secuencia de celdas adyacentes que conecten el punto de partida con el objetivo y se transforma esta secuencia de celdas en una ruta. Estos métodos pueden ser clasificados en exactos o aproximados.

\begin{figure}[h!]
\centering
	    \includegraphics[width=8cm]{Imagenes/08EstadoArte}
\caption{Descomposición de celdas vertical aplicado a un espacio de trabajo}
\label{fig:Fig8}
\end{figure}

\subsubsection{Descomposición de celdas exacta}
La descomposición de celdas exacta toma el espacio de configuración libre y lo divide en un conjunto de celdas que no se sobrelapan y que si se unen forman exactamente el $Q_{free}$. Las celdas adyacentes son representadas como un grafo de conectividad, en donde se debe buscar para encontrar un camino desde el punto de origen al punto de destino.

Este método debe asegurar que cada una de las celdas tengan una geometría simple y que existe una ruta entre dos configuraciones cualquiera al interior de la celda.

Lo que se ilustra en la figura ~\ref{fig:Fig8} corresponde a una descomposición de celdas vertical. Además existen otro tipo de decomposiciones como la triangular o la cilíndrica.

\subsubsection{Descomposición de celdas aproximada}
Tal como se llevo a cabo con el método anterior, este enfoque descompone el espacio libre en un conjunto de celdas, la gran diferencia es que en este caso todas las celdas deben tener exactamente la misma forma. Debido a esta restricción el espacio libre no puede ser representado de forma exacta.

Este método es bastante popular ya que las celdas son generadas a través de un calculo sencillo, debido a que todas tienen el mismo tamaño. Sin embargo, como las celdas son únicamente una aproximación del $Q_{free}$ el robot podría fallar al encontrar una ruta libre de colisiones.

El tamaño de las celdas puede ser adaptado en base a la geometría que presenten los obstáculos. Normalmente se comienza con celdas de mayor tamaño, y se va iterando, disminuyendo este tamaño hasta que se encuentra una ruta. Cada celda puede ser clasificada como: completamente ocupada, parcialmente ocupada o libre de colisión. El objetivo del robot será moverse a través de un camino de celdas libre de colisiones. Un ejemplo se muestra en la figura ~\ref{fig:Fig12}.

\begin{figure}[h!]
\centering
	    \includegraphics[width=6cm]{Imagenes/12EstadoArte}
\caption{Descomposición de celdas aproximada. Celdas completamente ocupadas en gris oscuro, celdas parcialmente ocupadas en gris claro, celdas libres en blanco.}
\label{fig:Fig12}
\end{figure}

\subsection{Roadmaps}
Dentro de esta técnica destacan dos métodos: Grafos de visibilidad y Diagramas de Voronoi.
\subsubsection{Grafo de visibilidad}
$Info obtenida de bens thesis grafo visibilidad, falta agregar referencias$\\
El grafo de visibilidad, también conocido como \textit{V$-$graph} es un mapa de caminos que se usa en espacios de configuraciones de dos dimensiones. Este grafo se construye considerando como nodos a todos los vertices del espacio de configuración de los obstáculos, como también el punto de inicio y el punto de destino. Las conexiones del grafo corresponderan a los segmentos que conectan dos nodos y que no se intersectan con ningún obstáculo. El resultado se puede apreciar en la figura ~\ref{fig:Fig9}, en la que se ilustra el grafo que se forma en un espacio de trabajo que cuenta con tres obstáculos.

\begin{figure}[h!]
\centering
	    \includegraphics[width=12cm]{Imagenes/09EstadoArte}
\caption{A la izquierda se muestra el \textit{V$-$graph} y a la derecha el \textit{T$-$graph}.}
\label{fig:Fig9}
\end{figure}

Se puede realizar una mejora a esta técnica removiendo todas las conexiones que no son tangentes o bordean los obstáculos. Eso se conoce como grafo tangente o \textit{T$-$graph}. Este grafo puede ser mucho más pequeño que el grafo de visibilidad, lo que permite que la búsqueda sea más rápida.
\subsubsection{Diagramas de Voronoi}
El espacio, en un diagrama de Voronoi, es particionado en regiones en que cada una contienen una caracteristica, y cada punto de esa región está más cerca de su propia característica que de otra. Los vertices corresponden a puntos que son equidistantes a dos o más obstáculos. Se puede considerar como característica un obstáculo, tal como se muestra en la figura ~\ref{fig:Fig10}. Entre dos obstáculos se trazará una linea, la cual será equidistante a estos.

Los diagramas de Voronoi dan como resultado una ruta, en donde los bordes de cada región permanecen alejados de los obstáculos, lo cual es un concepto clave para la planeación del camino \cite{6}. El robot utiliza el diagrama como un grafo para moverse hasta llegar al polígono en el que esta el punto de destino.

\begin{figure}[h!]
\centering
	    \includegraphics[width=8cm]{Imagenes/10EstadoArte}
\caption{Diagrama Voronoi}
\label{fig:Fig10}
\end{figure}
\section{ Probabilisticos y aleatorios}
Este tipo de técnicas exploran sólo a algunas partes del espacio de configuraciones por lo que pueden ser consideradas como locales. Además se basan en movimientos aleatorios para avanzar por el espacio hasta encontrar una secuencia válida desde el punto de origen al de destino. Gran parte de estos métodos no realizan una transformación del espacio de trabajo en un espacio de configuraciones, por lo que son bastante útiles en problemas con muchos grados de libertad.

\subsection{Mapas Probabilísticos}
Conocido también como \textit{Probabilistic Roadmap Method (PRM)}, los mapas probabilísticos se centran en crear un mapa generado de forma aleatoria, el cual debe estar libre de colisiones y conectar el robot con su punto de destino. Este método fue desarrollado de forma simultánea en la Universidad de Stanford y la Universidad de Utrecht \cite{7}. Consiste en dos fases: una de aprendizaje y una de consultas.

\begin{figure}[h!]
\centering
	    \includegraphics[width=8cm]{Imagenes/13EstadoArte}
\caption{Configuraciones que corresponden a los nodos del grafo R}
\label{fig:Fig13}
\end{figure}

En la fase de aprendizaje se construye un mapa probabilístico a través de la generación reiterada y aleatoria de configuraciones en el espacio libre del robot, tal como se puede ver en ~\ref{fig:Fig13}. Estas configuraciones son conectadas usando un planificador local simple y rápido. Luego este camino es almacenado como un grafo no dirigido $R$. Las configuraciones corresponden a los nodos de $R$ y las rutas calculadas entre los nodos a través del planificador local son los arcos. Esta fase termina con algunas mejoras de post-procesamiento en la conectividad de $R$.

En la última fase el grafo ya esta listo para responder a múltiples consultas. Lo que hace una consulta es preguntar por una ruta entre dos configuraciones del robot. Para procesar la consulta el método primero intenta encontrar una camino desde el punto de inicio a un nodo de $R$, y desde el punto de destino a otro nodo de $R$. Luego se busca una secuencia de arcos que conecten estos nodos en el grafo. La unión sucesiva de segmentos de la ruta transforman la secuencia encontrada en una ruta libre de colisiones para el robot. Esto se puede ver reflejado en la figura ~\ref{fig:Fig14}, en donde ya se cuenta con el grafo de la primera fase y posteriormente se agregan el punto de inicio del robot \textit{a} y el punto de destino \textit{b}.

\begin{figure}[h!]
\centering
	    \includegraphics[width=8cm]{Imagenes/14EstadoArte}
\caption{Ruta libre de colisiones desde punto de inicio \textit{a} hasta el punto de destino \textit{b}}
\label{fig:Fig14}
\end{figure}

Cabe mencionar que estas fases no necesariamente deben realizar de forma secuencial. Pueden existir problemas al encontrar una ruta en la fase de consultas, por lo que se puede iterar en la fase de aprendizaje para adaptar el tamaño del grafo.


\subsection{Árboles de exploración rápida aleatoria}
El algoritmo de \textit{Rapidly-exploring Random Trees} o RRT fue propuesto por Steve LaValle en el año 1998\cite{8}. En un comienzo estaba pensado como un algoritmo a utilizar por otros métodos, debido principalmente a que era capaz de explorar eficientemente el espacio de configuración desde un punto de origen, pero luego de su aparición surgieron varios artículos del mismo autor que adaptaron la idea original para convertirla en un método autónomo. Entre uno de los más confiables y para todo tipo de aplicaciones se encuentra la técnica \textit{RRT-Connect} de LaValle y Kuffner \cite{9}.

El RRT básico se basa en la construcción de un árbol compuesto por nodos y arcos que se incrementan gradual y aleatoriamente desde un punto de inicio. El algoritmo busca una configuración aleatoria dentro del espacio libre cercana al árbol, luego revisa si no existen colisiones con obstáculos y finalmente la va incorporando a través de nuevas ramas. El objetivo es avanzar en las zonas en que exista un mayor espacio libre tal como se muestra en la figura ~\ref{fig:Fig15}.

En cada una de las iteraciones se realizan dos acciones: tomar un punto al azar dentro de las configuraciones de espacio libre y hacer crecer el árbol en dirección a la configuración obtenida antes. Los puntos al azar tienden a buscar una construcción del árbol que cubra de forma uniforme todo el espacio de configuraciones libre de colisión. El algoritmo finalizará cuando se alcance el número de iteraciones definido o cuando se conecte el árbol con el punto de destino.

\begin{figure}[h!]
\centering
	    \includegraphics[width=12cm]{Imagenes/15EstadoArte}
\caption{Árbol generado considerando un número incremental de iteraciones}
\label{fig:Fig15}
\end{figure}

El \textit{RRT-Connect} se basa en el desarrollo de dos árboles, los cuales tienen su punto de origen en el punto de partida del robot y en el punto de destino. Ambos árboles crecen de forma simultánea uno hacia el otro, esto ayuda a que el algoritmo converge mucho más rápido, lo cuál minimiza también el tiempo empleado en comprobar las colisiones. Cada uno de los árboles invierte la mitad de su tiempo en explorar el espacio libre y la otra mitad buscando al otro árbol.

Otra variante que existe dentro de los RRT es que se utilicen varios árboles en vez de uno o dos. Aunque en estos casos es más complicado predefinir que árboles se conectarán entre sí, como también los tiempos que se emplearán para la exploración y la conexión de ellos.

\section{Optimización}

\subsection{Algoritmos Genéticos}
Los algoritmos genéticos son una poderosa herramienta moderna, la cual tiene mucho éxito en los casos en que el espacio de trabajo es demasiado grande o los grados de libertad del robot son muchos. La idea base de esta técnica es el uso de la selección natural de los miembros de la población, tomando como ejemplo la evolución de las especies, en donde el más fuerte sobrevive. Para lograr esto los especimenes más fuertes de cada generación logran sobrevivir y reproducirse para formar una nueva generación y asi sucesivamente.

Uno de los primeros trabajos en aplicar estos conceptos al problema de motion planning fue Xiao y Michalewicz en el año 1994 \cite{12}. Ellos desarrollaron un algoritmo planificador para un robot holonómico en un entorno 2D. En este algoritmo los cromosomas son rutas formadas por uno o más segmentos de lineas. Cada cromosoma incluye la configuración inicial y la destino, además de un conjunto de nodos intermedios. Cada nodo está formado por un par de coordenadas $(x,y)$, como también de una variable de estado booleano que indica si el nodo es factible. El número de nodos en cada cromosoma es generado de forma aleatoria en el proceso de inicialización. La diversidad de la población es generada a través de ocho operadores, con estos es posible generar una ruta arbitraria, pero esto no significa que todos los operadores son usados en cada momento. Las probabilidades usadas por algunos de los operadores es configurada durante el proceso de evolución lo que le daba bastante flexibilidad. A continuación se muestra cada uno de los operadores:
\begin{itemize}
\item Cruzamiento: Este combina dos rutas en dos nuevas rutas. Las rutas son divididas aleatoriamente en dos partes y recombinadas. La primera parte de la primera ruta con la segunda parte de la segunda ruta y la primera parte de la segunda ruta con la segunda parte de la primera ruta.

\item Mutación 1: Es usado para afinar las coordenadas de un nodo para ajustar la forma de una ruta.

\item Mutación 2: Es usado para cambios grandes en las coordenadas de nodos en una ruta.

\item Insertar: Inserta nuevos nodos en una ruta.

\item Borrar: Borra nodos de una ruta.

\item Intercambiar: Intercambia de dos nodos adjacentes en una ruta.

\item Suavizar: Suaviza rutas factibles eliminando los nodos que terminan en esquina, intentando ``redondear'' la ruta.

\item Reparar: Convierte en factible una ruta bordeando un obstáculo. Esto lo hace insertando nuevos nodos y borrando el que genera colisiones.
\end{itemize}

\begin{figure}[h!]
\centering
	    \includegraphics[width=13cm]{Imagenes/16EstadoArte}
\caption{Representación de los distintos operadores genéticos}
\label{fig:Fig16}
\end{figure}
\subsection{Colonia de hormigas}
El algoritmo \textit{Ant Colony Optimization}, también abreviado como ACO, es un enfoque inspirado en el comportamiento biológico de las hormigas en el mundo real. Las hormigas se comunican unas a otras depositando una sustancia química llamada feromona. Si en su camino no encuentran ningún rastro de feromona estas se mueven de forma aleatoria, pero cuando en su trayectoria se encuentran con feromona, estas tienen una tendencia a seguir el rastro. Además las hormigas prefieren de forma probabilística los caminos con una concentración mayor de feromona. Esto quiere decir que si se entre cruzan varios caminos la hormiga tendrá mayor probabilidad de elegir el camino con un rastro más fuerte de feromona. Este algoritmo fue propuesto por primera vez en el año 1992 \cite{10}.

Los algoritmos del tipo ACO son principalmente algoritmos constructivos, esto debido a que en cada una de las iteraciones, cada hormiga construye una solución al recorrer un grafo. En cada arco del grafo se deposita una feromona, la cual corresponde al peso del arco e influirá en el camino a tomar por cada hormiga. Sin embargo para el problema de motion planning se tiene un espacio de trabajo, el cual no esta dividido en nodos por lo que los nodos equivalen a casillas dentro de este espacio. Cada hormiga contará con una cantidad de movimientos posibles dependiendo del grado de dimensionalidad que se considerará. En el caso de $\mathbb{R}^2$ se podrá mover en $(x,y)$, por lo que serán 4 movimientos. Si fuese $\mathbb{R}^3$ serían 6 movimientos.

Estos algoritmos generalmente cuentan con cuatro pasos \cite{11}:
\begin{itemize}
\item Inicialización: Configurar una población inicial que corresponderá a la colonia de hormigas. Colocar puntos de partida para cada una de las hormigas de forma aleatoria. Para el caso de motion planning colocar estos puntos aleatorios no es posible ya que el robot cuenta con un punto de partida fijo. Los espacios con obstáculos tendrán $0$ feromonas por lo que serán movimientos inválidos.
\item Construcción de la solución: Tomando en cuenta la información del problema y la intensidad en el rastro de feromonas, cada hormiga se moverá a través de la probabilidad. Este paso se repetirá hasta que una solución completa sea construída.
\item Actualización del rastro: Se evalúa la solución y se deposita feromona en el camino de la solución dependiendo de la calidad de esta, para saber si es mejor o no.
\item Evaporación de la feromona: El rastro de feromona de todos los caminos disminuye constantemente al final de cada iteración que construye una solución completa.
\end{itemize}

\subsection{Enjambre de partículas}
El algoritmo de \textit{Particle Swarm Optimization} o PSO fue propuesto por primera vez en el año 1995 por Kennedy y Eberhart. Este se basa en la idea de enjambres en la naturaleza, tales como grupos de aves y cardúmenes de peces. Este algoritmo tiene partículas conducidas por enjambres naturales, cuya comunicación se basa en computación evolutiva.

PSO combina dos fuentes de información para sus partículas. Por un lado esta la experiencia propia de las partículas, guardando cual fue su mejor estado y que tan bueno fue. La otra fuente de información viene de la experiencia de sus pares, las partículas saben como el resto de sus pares se ha desempeñado en sus vecindarios. Cada partícula es considerada una solución candidata. El algoritmo usa una colección de partículas dentro del espacio de búsqueda y las mueve hacia zonas prometedoras en búsqueda del camino más corto.

