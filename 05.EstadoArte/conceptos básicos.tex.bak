El problema básico de motion planning consiste en encontrar un camino libre de colisiones para un robot, entre un conjunto rígido y estático de obstáculos. Por ejemplo, considérese la trayectoria de un robot móvil dentro de una construcción hacia un punto de destino. Este debería ejecutar esta tarea evitando las murallas o caer por las escaleras. Un algoritmo de motion planning toma una descripción de estas tareas como input, y produce los comandos que controlarán la velocidad y los giros de las ruedas del robot. Además existen otros tipos de problemas que involucran obstáculos en movimientos, múltiples robots e incluso ambientes de incertidumbre.

En este capitulo se realizará un recorrido por los conceptos claves que ayudarán a tener una mayor comprensión del problema de motion planning. Posteriormente se repasaran los distintos avances que han existido en esta área, desde la década de los 70 hasta la época actual. Finalmente revisaremos algunas variantes que existe del problema original.

\section{Robot Holonómico y no Holonómico}
Cuando se habla de un robot, este puede ser holonómico o no-holonómico. La holonomicidad tiene relación con la movilidad que tenga el robot, es decir, el grado de libertad que posee el robot.
Si la cantidad de grados de libertad del robot que son controlables es igual a la cantidad de grados de libertad disponibles se habla de un robot holonómico, por lo que se puede tratar como una partícula que puede desplazarse hacia cualquier dirección.
Si no todos los grados de libertad son controlable se habla entonces de un robot no holonómico.

Esto es lo que sucede con los automóviles, ya que si bien uno mueve moverse hacia adelante y hacia atrás, como también efectuar cambios de dirección a través del volante, los movimiento laterales no están permitidos. La figura ~\ref{fig:Fig6} muestra los movimientos que debe efectuar un vehículo para estacionarse.

\begin{figure}[h!]
\centering
	    \includegraphics[width=5cm]{Imagenes/06EstadoArte}
\caption{Vehículo no holonómico estacionandose}
\label{fig:Fig6}
\end{figure}
\section{Representación Geométrica}

En la mayoría de los casos existen dos alternativas para modelar la geometría de los elementos que se encuentran dentro de un entorno: una representación del contorno de los elementos o una representación sólida. Si por ejemplo modelaramos la geometría de una naranja a través de la representación por contorno se buscaría una ecuación similar a la de una esfera. Si se empleara en cambio la representación sólida se debería describir todo el conjunto de punto que están dentro de la naranja.

Para comenzar primero se debe definir que se trabajará en un entorno $\mathcal{W}$, el cual puede ser un mundo 2D en el que $\mathcal{W} = \mathbb{R}^2$ o un mundo en 3D en el que $\mathcal{W} = \mathbb{R}^3$. Para casos complejos se pueden usar espacios dimensionales más altos.

Un entorno $\mathcal{W}$ generalmente cuenta con dos tipos de entidades:
\begin{itemize}
    \item Obstáculos: Es el área dentro del entorno que se considera permanentemente ocupada, como por ejemplo una pared.
    \item Robot: Es un cuerpo que ha sido representado geométricamente y se encuentra en movimiento gracias a un algoritmo de motion planning.
\end{itemize}

El caso más común es modelar un robot que se encuentra dentro de una construcción con obstáculos como paredes, escaleras u otros elementos que impiden el normal desplazamiento del robot. Lo que se busca en la mayoría de los casos es que el robot recorra la construcción desde un punto de origen a uno de destino sin colisionar con ninguno de los obstáculos dentro de $\mathcal{W}$. Tanto los obstáculos como los robots son considerados subconjuntos de $\mathcal{W}$. Por lo que la región de obstáculos $\mathcal{O}$ en la cuál se pueden encontrar uno o más obstáculos dentro del entorno se define como, $\mathcal{O}\subseteq\mathcal{W}$.

A continuación se presentarán dos métodos que nos permitirá construir representaciones de obstáculos y de robots usando un conjunto de primitivas, como también de funciones polinomiales \cite{2}.

\subsection{Modelos Poligonales}
Cada región de obstáculos será representada tomando una combinación finita de primitivas. Además se usará teoría de conjuntos, esto implica que $\mathcal{O}$ quedará definida por un número finito de uniones, intersecciones entre primitivas. Cada primitiva será definida como $H_i$.

Consideremos primero que se trabajará con polígonos convexos en un entorno 2D, por lo que se define $\mathcal{W} = \mathbb{R}^2$. Para que un polígono sea convexo debe cumplir con lo siguiente, si se traza una recta entre cualquier par de puntos al interior del polígono, esta permanece dentro y no se intersecta con ninguna arista.

\begin{figure}[h!]
\centering
	    \includegraphics[width=5cm]{Imagenes/04EstadoArte}
\caption{Polígono definido a través de una combinación finita de primitivas}
\label{fig:Fig4}
\end{figure}

Una representación del contorno de un obstáculo $\mathcal{O}$  es un polígono de $m$ lados, el cual puede ser especificado usando dos conceptos, vertices y aristas. Por lo que el polígono puede ser expresado por una secuencia, $(x_1,y_1), (x_2,y_2), ..., (x_m,y_m)$, de $m$ puntos en $\mathbb{R}^2$.

Una representación sólida de $\mathcal{O}$ puede ser expresada como la intersección de $m$ semiplanos. Cada semiplano corresponde al conjunto de todos los puntos que se encuentran al interior de una arísta del polígono.  En la figura ~\ref{fig:Fig4} se muestra un ejemplo de un octágono formado por la intersección de 8 semiplanos.

Un obstáculo $\mathcal{O}$ con forma poligonal convexa de m lados  puede ser expresado como
\begin{center}
$\mathcal{O} = H_1\cap H_2\cap H_3\cap ...\cap H_m$
\end{center}
Ahora si consideramos un obstáculo que no es convexo, este puede ser expresado como la unión de varios obstáculos convexos tal como se define a continuación
\begin{center}
$\mathcal{O} = \mathcal{O}_1\cup \mathcal{O}_2\cup \mathcal{O}_3\cup ...\cup \mathcal{O}_n$
\end{center}
A través de esta definción se pueden representar obstáculos mucho más complejos. Aunque hay muchos formas de descomponer un obstáculo en componentes convexas se debe ser cuidadoso al realizar este procedimiento, buscando optimizar la selección para mejorar el desempeño de los algoritmos futuros a utilizar. Lo ideal es que se utilice una cantidad mínima de primitivas.

Todo lo anterior puede ser fácilmente extrapolado a un entorno $\mathcal{W} = \mathbb{R}^3$.

\subsection{Modelos Semi-Algebraicos}
En los modelos poligonales que se vieron en la sección anterior, se usaron primitivas las cuales eran funciones lineales. Para este tipo de modelos pueden ser usadas funciones de cualquier grado polinomial con coeficientes reales y variables $x$ e $y$.

Consideremos el caso de un entorno 2D. Una representación sólida puede ser definida de la forma
\begin{center}
$H = \{ (x,y) \in \mathcal{W} | f(x,y) \leqslant 0 \}$
\end{center}
Si por ejemplo se quiere representar un disco, se tendría que $f = x^2 + y^2 -4$, lo cual correspondería a un disco de radio 2 con centro en el origen.
Además se pueden realizar uniones e intersecciones entre las regiones para la construcción de modelos más complejos.
\begin{figure}[h!]
\centering
	    \includegraphics[width=4cm]{Imagenes/05EstadoArte}
\caption{Modelo semi-algebraico de un disco}
\label{fig:Fig5}
\end{figure}
\section{Cuerpos rígidos en movimiento}
Las técnicas vistas anteriormente nos sirven para definir tanto el área de los obstáculos como la del robot. Definamos $\mathcal{O}$ como un área de obstáculos, subconjunto de $\mathcal{W}$, y  a $\mathcal{M}$ como el robot,. En el problema básico de motion planning los obstáculos son estáticos, pero se requiere mover el robot $\mathcal{M}$, por lo que hay que introducir algunas transformaciones que nos permitan el desplazamiento de $\mathcal{M}$ desde un punto de origen a uno destino.

Una transformación es simplemente una función, $h:\mathcal{M} \rightarrow \mathcal{W} $ que mapea cada punto de $\mathcal{M}$ a $\mathcal{W}$. Este mapeo debe cumplir dos requerimientos:
\begin{itemize}
    \item La distancia entre cualquier par de puntoS de $\mathcal{M}$ se debe preservar.
    \item La orientación de $\mathcal{M}$ se debe preservar.
\end{itemize}

Por lo que la función de transformación, $h(m)$ para algún $m \in \mathcal{M}$ hace referencia a un punto en $\mathcal{W}$ que ocupa $m$. Si se desea extrapolar esta función a cada uno de los puntos del robot se tiene lo siguiente
\begin{center}
$h(\mathcal{M}) = \{ h(a) \in \mathcal{W} | m \in \mathcal{M} \}$
\end{center}
\subsection{Transformaciones en 2D}
\subsubsection{Traslación}
Un robot rígido $\mathcal{M} \subset \mathbb{R}^2$ es trasladado usando dos parámetros, $x_t, y_t \in \mathbb{R}$. Usando la función de transformación vista en la sección anterior se definirá $h$ como
\begin{center}
$h(x,y) = (x+x_t,y+y_t)$
\end{center}
Una representación del contorno de $\mathcal{M}$ puede ser trasladada transformando cada uno de los vértices del polígono. Por lo que cada punto $(x_i,y_i)$ de un polígono con $i$ vertices es reemplazado por $(x_i+x_t,y_i+y_t)$.

Ahora si se quiere realizar una traslación a una representación sólida de $\mathcal{M}$ definida a través de primitivas, cada primitiva de la forma
\begin{center}
$H_i = \{ (x,y) \in \mathbb{R}^2 | f(x,y) \leqslant 0 \}$
\end{center}
debe ser transformada a
\begin{center}
$h(H_i) = \{ (x,y) \in \mathbb{W} | f(x-x_t,y-y_t) \leqslant 0 \}$
\end{center}

Dar ejemplo con figura...
\subsubsection{Rotación}
Un robot $\mathcal{M}$ puede ser rotado en sentido antihorario por un ángulo $\theta \in [0,2\pi]$ mapeando cada coordenada $(x,y)$ perteneciente a $\mathcal{M}$ de la forma
\begin{center}
$(x,y) \mapsto (x \cos\theta - y \sin\theta, x \sin\theta + y \cos\theta)$
\end{center}

Usaremos una matriz de rotación para explicar la transformación,
 \begin{center}
 $R(\theta) =
 \begin{pmatrix}
  \cos\theta & -\sin\theta \\
  \sin\theta & \cos\theta \\
 \end{pmatrix}$
\end{center}

Por lo que finalmente queda como:
 \begin{center}
 $\begin{pmatrix}
  x\cos\theta - y\sin\theta \\
  x\sin\theta + y\cos\theta \\
 \end{pmatrix}
  =R(\theta)
  \begin{pmatrix}
  x \\
  y
 \end{pmatrix}$

\end{center}
\subsubsection{Rotación y traslación combinados}

En varias ocasiones el robot realizará una rotación y posteriormente se desplazará, por lo que es necesario una función de transformación que permita combinar la rotación y la traslación. Además hay que tener presente que llevar a cabo un movimiento de rotación y posteriormente uno de traslación es distinto a que si se realizarán al revés, por lo que no son conmutativos.

Si se quiere realizar una rotación de $\theta$ grados y sucesivamente un movimiento de traslación de $(x_t,y_t)$  la transformación aplicada sobre cada coordenada $(x,y) \in \mathcal{M}$ será:
 \begin{center}
 $\begin{pmatrix}
  x\cos\theta - y\sin\theta + x_t \\
  x\sin\theta + y\cos\theta + y_t \\
 \end{pmatrix}
 $
\end{center}

Las transformaciones vistas anteriormente para 2D son conceptualmente similares a lo que se debe realizar si nos encontraramos en un entorno 3D.

\section{Espacio de Configuración}
En el problema de motion planning se debe conocer en cada instante la posición de cada una de las partes que componente el  robot. Un robot no es simplemente un punto, cuenta con una masa, un volumen, como también con restricciones de velocidad y aceleración. Debido a esto se debe tener presente que todas las partes del robot no colisionen con los obstáculos que se encuentran dentro del entorno. Para solucionar este problema se introduce el concepto clave de configuración. Este ayuda a especificar la posición de cada punto de un robot dentro de el entorno. El espacio de todas las configuraciones es el espacio de configuración del entorno, también llamado C$-$space. Este concepto fue formalizado por Lozano-Pérez en el año 1979 \cite{1}.

\begin{figure}[h!]
\centering
	    \includegraphics[width=6cm]{Imagenes/01EstadoArte}
\caption{Un entorno con obstáculos es llamado espacio de trabajo}
\label{fig:Fig1}
\end{figure}

Para tener una mayor comprensión de este concepto se puede ver la figura ~\ref{fig:Fig1}. En esta se muestra un entorno el cual cuenta con una serie de obstáculos, a esto se le llama normalmente espacio de trabajo y se definirá como $\mathcal{W}$. Lo primero que se debe hacer, ya que se trabajará en un entorno de dos dimensiones, será transformar este espacio de trabajo $\mathcal{W}$ en un espacio de configuración que permita especificar la posición de cada uno de los elementos. Esto puede verse reflejado en la figura ~\ref{fig:Fig2}. Se puede conocer la posición de cada uno de los obstáculos considerando las coordenadas $x$ e $y$, a esto se le llamará espacio de configuración $\mathcal{Q}$.

\begin{figure}[h!]
\centering
	    \includegraphics[width=5cm]{Imagenes/02EstadoArte}
\caption{Espacio de configuración de un entorno con obstáculos}
\label{fig:Fig2}
\end{figure}

El espacio de configuración de los obstáculos $\mathcal{QO}$ puede ser definido como el conjunto de configuraciones $q$ en la cual el robot $\mathcal{M}$ intersecta con los obstáculos $\mathcal{O}$,
\begin{center}
$\mathcal{QO} = \{ q \in \mathcal{Q} | \mathcal{M}(q) \cap \mathcal{O}\}$
\end{center}
Ahora se agrega al espacio de configuración $\mathcal{Q}$ el robot rojo $\mathcal{M}$ y se considera que este no puede ser rotado y sólo puede hacer movimientos de traslación de forma horizontal y vertical. La figura ~\ref{fig:Fig3} muestra de color gris claro las configuraciones en donde el robot colisionaria con un objeto o estaría fuera del espacio de trabajo, esto corresponde al $\mathcal{QO}$. El calculo del espacio de configuración de los obstáculos nos permite tratar el robot como un punto y ``agregar'' las áreas de color gris a los obstaculos.

El conjunto de configuraciones que evita las colisiones con los obstáculos es llamado el espacio libre o $\mathcal{Q}_{free}$. Este puede ser calculado al realizar
\begin{center}
$\mathcal{Q}_{free} = \mathcal{Q} \setminus \mathcal{QO}$
\end{center}

\begin{figure}[h!]
\centering
	    \includegraphics[width=5cm]{Imagenes/03EstadoArte}
\caption{Espacio de configuración de un entorno con obstáculos y un robot}
\label{fig:Fig3}
\end{figure}

\section{Revisión Histórica}

Ahora que ya hemos visto los conceptos básicos de motion planning, se dará a conocer como este problema ha ido evolucionando en el tiempo, suscitado un  gran interés en la comunidad en las últimas décadas, debido principalmente a que existen muchas variantes.

El estudio del problema de motion planning se remonta al año 1966 con el \textit{Sofa Problem} planteado por Leo Moser \cite{3}. En este trabajo se planteaba el problema de desplazar un mueble a través de un pasillo, lo que implicaba calcular si era posible trasladar y rotar un sofa en la esquina del pasillo. Aunque el problema de motion planning se hizo realmente conocido gracias al \textit{Piano Mover's problem}, que consiste en mover un piano dentro de una habitación sin que colisione con otros objetos que esten presentes en el salón. Luego de haber estudiado la importancia del espacio de configuración podemos apreciar que el problema de mover un piano dentro de una casa puede ser fácilmente transformado  que en vez de un piano sea una pelota de tennis, gracias al calculo del espacio de configuración de los obstáculos. En la figura ~\ref{fig:Fig7} se puede apreciar como se asegura que dentro de la región blanca el piano no sufrirá colisiones. El conjunto de todas las posiciones en las que puede estar el piano se conoce como el C$-$space del piano.
\begin{figure}[h!]
\centering
	    \includegraphics[width=10cm]{Imagenes/07EstadoArte}
\caption{Espacio de configuración del piano}
\label{fig:Fig7}
\end{figure}

Es posible realizar una separación entre las distintas técnicas que se han empleado para dar solución al problema de motion. Por un lado están las técnicas completas que aseguran y entregan el mismo resultado en cada una de las ejecuciones. Además son capaces de decir si existe una solución. El gran problema con este tipo de métodos es que en entornos complejos, cuando existen muchas restricciones o el grado de libertad del vehículo es muy elevado, presentan limitaciones con respecto al tiempo de cómputo necesario para obtener una solución. Es por ello que han surgido nuevos enfoque como los métodos probabilisticos de roadmap o los basados en árboles aleatorios de exploración rápida. Estos últimos métodos puedes ser clasificdos como motion planning basado en muestreo.  